// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model courses {
  id          Int       @id @default(autoincrement())
  nameCourse  String    @map("name_course")
  description String    @db.Text
  icon        String
  colorTheme  String    @map("color_theme")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  modules     modules[]
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model modules {
  id              Int             @id @default(autoincrement())
  courseId        Int?            @map("course_id")
  courses         courses?        @relation(fields: [courseId], references: [id])
  batchTitle      String          @map("batch_title")
  description     String          @db.Text
  topics          String
  difficultyLevel DifficultyLevel @map("difficulty_level")
  orderIndex      Int             @map("order_index")
  originalPrice   Decimal         @map("original_price") @db.Decimal(15, 2)
  salePrice       Decimal         @map("sale_price") @db.Decimal(15, 2)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  lessons         lessons[]
  exercises       exercises[]
}

enum LessonType {
  PYTHON
  TYPESCRIPT
  PHP
  SQLITE3
  JAVASCRIPT
  JAVA
}

model lessons {
  id             Int             @id @default(autoincrement())
  moduleId       Int             @map("module_id")
  modules        modules?        @relation(fields: [moduleId], references: [id])
  lessonTitle    String          @map("lesson_title")
  description    String          @db.Text
  lessonType     LessonType      @map("lesson_type")
  pointsReward   Int             @map("points_reward")
  starterCode    String          @map("starter_code") @db.LongText
  instructions   String          @db.LongText
  expectedOutput String          @map("expected_output") @db.LongText
  orderIndex     Int             @map("order_index")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user_progress  user_progress[]
}

model exercises {
  id             Int            @id @default(autoincrement())
  moduleId       Int            @map("module_id")
  modules        modules?       @relation(fields: [moduleId], references: [id])
  level          ExercisesLevel
  question       String         @db.Text
  hint           String         @db.Text
  solution       String         @db.Text
  exerciseType   ExercisesType  @map("exercise_type")
  expectedOutput String         @map("expected_output") @db.Text
  submissions    submissions[]
}

enum ExercisesType {
  MULTIPLE_CHOICE
  CODING
  BOOLEAN
}

enum ExercisesLevel {
  EASY
  MEDIUM
  HARD
}

model users {
  id            String          @id @db.Char(64)
  name          String
  email         String
  passwordHash  String          @map("password_hash")
  role          Roles
  user_progress user_progress[]
  submissions   submissions[]
}

enum Roles {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model user_progress {
  id          Int      @id
  userId      String?  @map("user_id")
  user        users?   @relation(fields: [userId], references: [id])
  lessonsId   Int      @map("lessons_id")
  lessons     lessons  @relation(fields: [lessonsId], references: [id])
  status      Status
  completedAt DateTime @map("completed_at")
}

enum Status {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

model submissions {
  id            Int       @id
  exerciseId    Int       @map("exercise_id")
  exercise      exercises @relation(fields: [exerciseId], references: [id])
  userId        String?   @map("user_id")
  user          users?    @relation(fields: [userId], references: [id])
  submittedCode String    @map("submitted_code") @db.Text
  isCorrect     Boolean   @map("is_correct")
  submittedAt   DateTime  @map("submitted_at")
}
