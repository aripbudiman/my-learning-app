// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model courses {
  id          Int         @id @default(autoincrement())
  name        String
  description String      @db.Text
  level       CourseLevel
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  modules     modules[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model modules {
  id            Int         @id @default(autoincrement())
  courseId      Int?        @map("course_id")
  courses       courses?    @relation(fields: [courseId], references: [id])
  title         String
  orderIndex    Int         @map("order_index")
  estimatedTime Int         @map("estimated_time")
  createdAt     DateTime    @default(now()) @map("createdAt")
  updatedAt     DateTime    @updatedAt @map("updatedAt")
  lessons       lessons[]
  exercises     exercises[]
}

model lessons {
  id            Int             @id @default(autoincrement())
  module_id     Int
  modules       modules?        @relation(fields: [module_id], references: [id])
  title         String
  content       String          @db.LongText
  exercise_code String          @db.LongText
  order_index   Int
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  user_progress user_progress[]
}

model exercises {
  id              Int            @id @default(autoincrement())
  module_id       Int
  modules         modules?       @relation(fields: [module_id], references: [id])
  level           ExercisesLevel
  question        String         @db.Text
  hint            String         @db.Text
  solution        String         @db.Text
  exercise_type   ExercisesType
  expected_output String         @db.Text
  submissions     submissions[]
}

enum ExercisesType {
  MULTIPLE_CHOICE
  CODING
  BOOLEAN
}

enum ExercisesLevel {
  EASY
  MEDIUM
  HARD
}

model users {
  id            Int             @id
  name          String
  email         String
  password_hash String
  role          Roles
  user_progress user_progress[]
  submissions   submissions[]
}

enum Roles {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model user_progress {
  id           Int      @id
  user_id      Int?
  user         users?   @relation(fields: [user_id], references: [id])
  lessons_id   Int
  lessons      lessons  @relation(fields: [lessons_id], references: [id])
  status       Status
  completed_at DateTime
}

enum Status {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

model submissions {
  id             Int       @id
  exercise_id    Int
  exercise       exercises @relation(fields: [exercise_id], references: [id])
  user_id        Int?
  user           users?    @relation(fields: [user_id], references: [id])
  submitted_code String    @db.Text
  is_correct     Boolean
  submitted_at   DateTime
}
